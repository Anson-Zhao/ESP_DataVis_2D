<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script src='https://cors.aworldbridgelabs.com:9084/http://mockup.esp.aworldbridgelabs.com/jsLibrary/jquery-3-4-1.min.js'></script>
    <script src="https://cors.aworldbridgelabs.com:9084/http://mockup.esp.aworldbridgelabs.com/jsLibrary/WorldWind-built.js"></script>
    <script type="text/javascript" src="https://cors.aworldbridgelabs.com:9084/http://mockup.esp.aworldbridgelabs.com/jsLibrary/dygraph2.1.0/dygraph2.1.0.min.js"></script>
    <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.17/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/1.5.2/js/dataTables.buttons.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://momentjs.com/downloads/moment-with-locales.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    <script src="https://frogcat.github.io/canvas-arrow/canvas-arrow.js"></script>`

    <link rel="stylesheet" href="https://cors.aworldbridgelabs.com:9084/http://mockup.esp.aworldbridgelabs.com/jsLibrary/dygraph2.1.0/dygraph2.1.0.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/1.5.2/css/buttons.dataTables.min.css">
    <!--<link rel="stylesheet" href="//unpkg.com/flatpickr/dist/flatpickr.min.css">-->
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.17/css/jquery.dataTables.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <style>
        body { padding-left:80px; padding-bottom: 300px; word-wrap:break-word;}
    </style>
</head>
<body>

<div id="but0">
    <!--    <p>Historical Data Charts &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>-->
    <button onclick='window.location.replace("http://localhost:63342/ESP_DataVis_2D/historical.html")'>Historical Data</button>
</div>
<!--<input type="button" onclick='window.location.replace("index.html")' class="button button2" value="Go To Mockup Home">-->

<!--<h2 id ="jump">go back to homepage</h2>-->

<h2 id = "text"></h2>
<h3 id="info"></h3>
<h4 id="message"></h4>


<div class="col-sm-9" id="globe">
    <canvas id="canvasOne" width="1000" height="1000"
            style="width: 50%; height: auto; background-color: white;">
            style="width: 50%; height: auto; background-color: white;">
        Your browser does not support HTML5 Canvas.
    </canvas>
</div>

<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>

<!--would be filled out afterwards according to station id-->
<div id = "newDiv"> </div>

<script>
    let timeFrom = '<%= timeFrom %>',
        timeTo = '<%= timeTo %>',
        stationName = '<%= stationName %>',
        city = '<%= city %>',
        state = '<%= state %>',
        lo = '<%= lo %>',
        la = '<%= la %>',
        stationId = '<%= stationId %>'; //the id of the station which turned the trigger on
    console.log("Here is what I get")
    console.log(stationId, timeFrom, timeTo, city, state, lo, la);
    let timeIntervalHalf = 6, //this is half, so the total duration is 12 hrs
        timefrom = moment.utc(timeFrom,'').add(-timeIntervalHalf,'hour').format().slice(0, -1) + ".000Z", // -6h from time
        timeto = moment.utc(timeTo,'').add(0.1,'hour').format().slice(0, -1) + ".000Z"; // +6h to time
        // timeTo = moment.utc(timeTo)
    let x_arr = [],
        y_arr = [],
        z_arr = [];
    let ini = true;
    // let stationIdArr = ["station_the","station_two","station_for"];

    // a title for the new page
    $('#text').html("Event Page for "+stationName+" from "+ timeFrom + " to " + timeTo)
    $('#info').html("City: "+city+ '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'+"State:"+state)
    $('#message').html("Latitude: "+la+ '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'+"Longitude:"+lo)
    // rotate the globe
    let wwd = new WorldWind.WorldWindow("canvasOne");

    // Create and add layers to the WorldWindow.
    let layers = [
        // Imagery layers.
        {layer: new WorldWind.BMNGLayer(), enabled: true},
        {layer: new WorldWind.BMNGLandsatLayer(), enabled: false},
        {layer: new WorldWind.BingAerialWithLabelsLayer(null), enabled: true},
        // Add atmosphere layer on top of all base layers.
        {layer: new WorldWind.AtmosphereLayer(), enabled: true},
        // WorldWindow UI layers.
        // {layer: new WorldWind.CompassLayer(), enabled: true},
        {layer: new WorldWind.CoordinatesDisplayLayer(wwd), enabled: true},
        // {layer: new WorldWind.ViewControlsLayer(wwd), enabled: true}
    ];

    for (let l = 0; l < layers.length; l++) {
        layers[l].layer.enabled = layers[l].enabled;
        wwd.addLayer(layers[l].layer);
    }

    wwd.goTo(new WorldWind.Position(36.375229, -121.823628, 600000));

    $.ajax({
        // url: 'https://cors.aworldbridgelabs.com:9084/http://mockup.esp.aworldbridgelabs.com:3005/stationsForN',
        url: "http://localhost:3005/stationsForN",
        method: "get",
        async: false,
        data: {stationID: stationId},
        success: function(res) {
            // stationsData=[];
            res.forEach(function(el,i) {

                queryAndDisplay(el);
                // console.log(el)
                // if (ini && i === res.length - 1) { ini = false }

            });
        }
    });

    function building(station){
        //add live chart title
        let cTitle = document.createElement("h2");
        cTitle.className = station.StationId;
        cTitle.textContent = station.StationName;

        //add live chart Div
        let chartDiv = document.createElement("div");
        chartDiv.className = station.StationId+" charts";
        chartDiv.setAttribute("style", "left: 90px; width: max-content; display: inline-table;");
        $('#newDiv').append(cTitle).append(chartDiv);

        //add xyz divs into live chart Div
        let cdivX = document.createElement("div");
        let cdivY = document.createElement("div");
        let cdivZ = document.createElement("div");
        cdivX.className = "chart n0";
        cdivY.className = "chart n1";
        cdivZ.className = "chart n2";
        cdivX.id = station.StationId+"_graphX";
        cdivY.id = station.StationId+"_graphY";
        cdivZ.id = station.StationId+"_graphZ";
        cdivX.setAttribute("style", "float: left;");
        cdivY.setAttribute("style", "float: left;");
        cdivZ.setAttribute("style", "float: left;");
        let c = "."+station.StationId+".charts";
        $(c).append(cdivX).append(cdivY).append(cdivZ);
    }

    async function queryAndDisplay(station){
        //wait until all the elements are created, then call query and display function
        // if (ini) {
        await building(station);
        // }
        drawArrows(station);

        $.ajax({
            // url: 'https://cors.aworldbridgelabs.com:9084/http://mockup.esp.aworldbridgelabs.com:3005/newWind',
            url: 'http://localhost:3005/newWind',
            type: 'GET',
            // dataType: 'json',
            // async: false,
            data: {timeFrom: timefrom, timeTo: timeto, stationIs: station.StationId},
            success: function(res) {
                // console.log("hh4");
                if (!!res) {
                    // console.log("hhh")
                    let x_arr = [];
                    let y_arr = [];
                    let z_arr = [];

                    res.forEach(function (el, i) {
                        x_arr[i] = [new Date(el.time), el.X];
                        y_arr[i] = [new Date(el.time), el.Y];
                        z_arr[i] = [new Date(el.time), el.Z];

                        if(i===res.length-1){

                            Z = new Dygraph(
                                // containing div
                                document.getElementById(station.StationId + "_graphZ"),

                                // CSV or path to a CSV file.
                                z_arr,
                                {
                                    labels: ["time", "Z"],
                                    title: "Z (+Z is positive altitude, -Z is below ground)",
                                    rollPeriod: 1,
                                    showRoller: true,
                                    legend: 'always',
                                    showRangeSelector: true,
                                    rangeSelectorHeight: 30,
                                    // rollPeriod: 14,
                                    // showRoller: true,
                                    // customBars: true,
                                    // showRangeSelector: true
                                    // rangeSelectorHeight: 30,
                                    // rangeSelectorPlotStrokeColor: 'yellow',
                                    // rangeSelectorPlotFillColor: 'lightyellow'
                                }
                            );
                            Y = new Dygraph(
                                // containing div
                                document.getElementById(station.StationId + "_graphY"),

                                // CSV or path to a CSV file.
                                y_arr,
                                {
                                    labels: ["time", "Y"],
                                    title: "Y (+Y is east, -Y is west)",
                                    rollPeriod: 1,
                                    showRoller: true,
                                    legend: 'always',
                                    showRangeSelector: true,
                                    rangeSelectorHeight: 30,
                                    // rollPeriod: 14,
                                    // showRoller: true,
                                    // customBars: true,
                                    // showRangeSelector: true
                                    // rangeSelectorHeight: 30,
                                    // rangeSelectorPlotStrokeColor: 'yellow',
                                    // rangeSelectorPlotFillColor: 'lightyellow'
                                }
                            );
                            X = new Dygraph(
                                // containing div
                                document.getElementById(station.StationId + "_graphX"),

                                // CSV or path to a CSV file.
                                x_arr,
                                {

                                    // customBars: true,
                                    title: "X (+X is north, -X is south)",
                                    // ylabel: 'Temperature (F)',
                                    labels: ["time", "X"],
                                    rollPeriod: 1,
                                    showRoller: true,
                                    legend: 'always',
                                    showRangeSelector: true,
                                    rangeSelectorHeight: 30,
                                    // rangeSelectorPlotStrokeColor: 'yellow',
                                    // rangeSelectorPlotFillColor: 'lightyellow'
                                }
                            );
                        }
                    });
                    // console.log(x_arr[0])
                    // console.log(x_arr[x_arr.length-1])
                    // console.log(download);
                    // console.log(res);

                    // $('#requesting').hide();
                    // $("#AvgData").attr("disabled", false);
                }
            }
        });
    }

    //draw the arrows and create surface Image
    function drawArrows(station){
        //create canvas according to stationId
        let needleCanvas = document.createElement("canvas");
        needleCanvas.id= station.StationId  + "_needle";
        needleCanvas.width = 300;
        needleCanvas.height = 300;
        // $('#newDiv').append(needleCanvas);
        let ctx2d = needleCanvas.getContext("2d");

        $.ajax({
            // url: 'https://cors.aworldbridgelabs.com:9084/http://mockup.esp.aworldbridgelabs.com:3005/newWind',
            url: 'http://localhost:3005/newWind',
            type: 'GET',
            // dataType: 'json',
            // async: false,
            data: {timeFrom: timeFrom, timeTo: timeTo, stationIs: station.StationId}, //get the data from that point of time
            success: function (res) {
                var X = res[0].X / 100;
                var Y = res[0].Y / 100;
                // console.log(X , Y);
                ctx2d.beginPath();
                let sector;

                //draw arrows----
                //first 2 numbers are coordinates of start point,
                // and the 2 after is the coordinates of  the end point
                // the array at the end controls the shape of the arrow.
                if(X>0){ //sorry for my stupid logic :) heihei
                    if(Y<0){ //+x, -y
                        sector = new WorldWind.Sector(parseFloat(station.Latitude) -4, parseFloat(station.Latitude), parseFloat(station.Longitude), parseFloat(station.Longitude) + 4)
                        // console.log(sector);
                        // sector = new WorldWind.Sector(30, 40, -90, -80)
                        ctx2d.arrow(0, 0, X, Math.abs(Y), [0, 1, -10, 1, -10, 5]);
                        ctx2d.fillStyle = "#ffffe0";
                        ctx2d.fill();
                    }else { //+x,+y
                        sector = new WorldWind.Sector(parseFloat(station.Latitude), parseFloat(station.Latitude)+4, parseFloat(station.Longitude), parseFloat(station.Longitude)+4)
                        ctx2d.arrow(0, needleCanvas.height, X, needleCanvas.height-Y, [0, 1, -10, 1, -10, 5]);
                        ctx2d.fillStyle = "#ffffe0";
                        ctx2d.fill();
                        }
                }else{
                    if(Y<0){ //-x,-y
                        sector = new WorldWind.Sector(parseFloat(station.Latitude)-4, parseFloat(station.Latitude), parseFloat(station.Longitude)-4, parseFloat(station.Longitude))
                        ctx2d.arrow(needleCanvas.width, 0, needleCanvas.width +X, Y, [0, 1, -10, 1, -10, 5]);
                        ctx2d.fillStyle = "#ffffe0";
                        ctx2d.fill();
                    }else { // -x, +y
                        sector = new WorldWind.Sector(parseFloat(station.Latitude), parseFloat(station.Latitude)+4, parseFloat(station.Longitude)-4, parseFloat(station.Longitude))
                        ctx2d.arrow(needleCanvas.width, needleCanvas.height, needleCanvas.width +X, needleCanvas.height- Y, [0, 1, -10, 1, -10, 5]);
                        ctx2d.fillStyle = "#ffffe0";
                        ctx2d.fill();
                    }
                }

                //create surface image---

                var surfaceImage = new WorldWind.SurfaceImage(sector, new WorldWind.ImageSource(needleCanvas));

                // Add the surface images to a layer and the layer to the WorldWindow's layer list.
                var surfaceImageLayer = new WorldWind.RenderableLayer();
                surfaceImageLayer.displayName = station.StationName;
                surfaceImageLayer.addRenderable(surfaceImage);
                wwd.addLayer(surfaceImageLayer);

                //create placemarks
                // let placemark,
                //     placemarkAttributes = new WorldWind.PlacemarkAttributes(null),
                //     highlightAttributes,
                //     placemarkLayer = new WorldWind.RenderableLayer("Placemarks" + station.StationId),
                //     latitude = station.Latitude,
                //     longitude = station.Longitude;
                //
                // //set attribute for one placemark
                // placemarkAttributes.imageScale = 0.3;
                // placemarkAttributes.imageOffset = new WorldWind.Offset(WorldWind.OFFSET_FRACTION, 0.5,
                //     WorldWind.OFFSET_FRACTION, 0.5);
                // placemarkAttributes.imageColor = WorldWind.Color.WHITE;
                // placemarkAttributes.labelAttributes.scale = 0;
                //
                // //set attributes
                // placemarkAttributes.imageScale = 0.5;
                // placemarkAttributes.imageOffset = new WorldWind.Offset(WorldWind.OFFSET_FRACTION, 0.5,
                //     WorldWind.OFFSET_FRACTION, 0.5);
                // placemarkAttributes.imageColor = WorldWind.Color.WHITE;
                // placemarkAttributes.labelAttributes.color = WorldWind.Color.YELLOW;
                // placemarkAttributes.labelAttributes.offset = new WorldWind.Offset(
                //     WorldWind.OFFSET_FRACTION, 0.5,
                //     WorldWind.OFFSET_FRACTION, 1.0);
                // placemarkAttributes.leaderLineAttributes.outlineColor = WorldWind.Color.RED;
                // placemark = new WorldWind.Placemark(new WorldWind.Position(latitude, longitude, 1e2), true, null);
                // placemark.label = station.StationName + "\n";
                //
                // placemarkAttributes = new WorldWind.PlacemarkAttributes(placemarkAttributes);
                // // placemarkAttributes.imageSource =WorldWind.configuration.baseUrl + "images/pushpins/"
                //
                // placemarkAttributes.imageSource = new WorldWind.ImageSource(needleCanvas);
                // placemark.attributes = placemarkAttributes;
                //
                // highlightAttributes = new WorldWind.PlacemarkAttributes(placemarkAttributes);
                // highlightAttributes.imageScale = 1.2;
                // placemark.highlightAttributes = highlightAttributes;
                // placemarkLayer.addRenderable(placemark);
                // wwd.addLayer(placemarkLayer);
            }
        });
    }

</script>
</body>
</html>