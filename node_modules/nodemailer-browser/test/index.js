'use strict';

var chai = require('chai');
var expect = chai.expect;
var path = require('path');
var fs = require('fs');
var nodemailer = require('nodemailer');
var mockery = require('mockery');

describe('The nodemailer-browser module', function() {
  var tmpdir = path.join(__dirname, '..', 'tmp');

  beforeEach(function() {
    mockery.enable({warnOnReplace: false, warnOnUnregistered: false, useCleanCache: true});
  });

  afterEach(function() {
    mockery.resetCache();
    mockery.deregisterAll();
    mockery.disable();
  });

  describe('the send fn', function() {

    describe('with mocks', function() {
      it('should init the transport with default values', function() {
        var nodemailerBrowser = require('..')();
        expect(nodemailerBrowser.dir).to.equal(path.join(process.cwd(), 'tmp', 'mailbrowser'));
        expect(nodemailerBrowser.browser).to.be.true;
      });

      it('should init the transport with given values', function() {
        var options = {
          dir: '/tmp',
          browser: false
        };
        var nodemailerBrowser = require('..')(options);
        expect(nodemailerBrowser.dir).to.equal(options.dir);
        expect(nodemailerBrowser.browser).to.equal(options.browser);
      });
    });

    describe('with nodemailer', function() {
      it('should create an email in the tmp directory and call nodeOpen with the correct filename', function(done) {
        var openCalled = 0;
        var filenameOpened = null;
        mockery.registerMock('open', function(filename) {
          openCalled++;
          filenameOpened = filename;
        });

        var transport = nodemailer.createTransport(require('..')({dir: tmpdir, browser: true}));
        var email = {
          html: '<h1>Mail test</h1>'
        };
        transport.sendMail(email, function(err, info) {
          expect(err).to.not.exist;
          expect(openCalled).to.equal(1);
          expect(filenameOpened).to.equal(info.messageId);
          expect(fs.existsSync(info.messageId)).to.be.true;
          fs.readFile(info.messageId, 'utf-8', function(err, data) {
            expect(err).to.not.exist;
            expect(data).to.equal(email.html);
            done();
          });
        });
      });
    });

  });
});
